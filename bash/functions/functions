# -------------------------------------
#   Create Symlink
#   -> Creates a symlink from two files
# -------------------------------------
#
# $1 - The file to create a symlink from
# $2 - The file the symlink is to
#
# Usage: `create_symlink path/to/file path/to/file`
#

function create_symlink() {
  # Create the new file
  touch $2

  # Copy the original file contents into the new file
  while read line; do
   echo $line >> $2
  done < $1

  # Remove the original file
  rm $1

  # Create the symlink
  ln -s $2 $1
}

# ----------------------------------------------------
#   Remote Tracking Branch
#   -> Creates a new branch and pushes that branch to remote
# ----------------------------------------------------
#
# $1 - the branch name
#
# Usage: `git_remote_tracking_branch fix_sign_up_form_styles`
#

function git_remote_tracking_branch() {
  git checkout -b $1 && git push -u origin $1
}

# ----------------------------------------------------
#   Git Delete Branch For Real
#   -> Delete both local and remote copies of a branch
# ----------------------------------------------------
#
# $1 - the branch name
#
# Usage: `git_delete_branch_for_real fix_form_styles`
#

function git_delete_branch_for_real() {
  git branch -D $1 && git push origin :$1
}

# ----------------------------------------------------
#   Find Alias
#   -> Greps for an alias
# ----------------------------------------------------
#
# $1 - the alias name
#
# Usage: `find_alias 'gba'`
#

function find_alias() {
  alias | grep "alias\s$1"
}

# ----------------------------------------------------
#   Find Alias
#   -> Greps for an alias
# ----------------------------------------------------

function sublime() {
  # If arguments exist, use the default behavior
  if [ $# -gt 0 ]; then
    subl "$@"

  # If no arguments exist...
  else
    ls -1 *.sublime-project &> /dev/null

    # If a .sublime-project file exists, open that
    if [ "$?" -eq 0 ]; then
      subl "$(ls -1 *.sublime-project)"

    # Otherwise, open the current directory
    else
      subl .
    fi
  fi
}

# -------------------------------------
#   Dispatch
#   -> Check if project has setup function and run it
# -------------------------------------
#
# Usage: `dispatch`
#

function dispatch() {
  local path=$(pwd)
  local project=$(basename $path)

  if [ "$DISPATCHED" == 0 ]; then
    if type -t "$project"_setup | grep -i function > /dev/null; then
      "$project"_setup
      DISPATCHED=1
    fi
  fi
}


# ----------------------------------------------------
#   Automatically change node version based on .nvmrc
#
#   Based on https://github.com/creationix/nvm/issues/603#issuecomment-88617225
# ----------------------------------------------------

nvm_auto_switch() {
  local NVM_RC_FILE
  local DEFAULT_VERSION
  local NVM_VERSION
  NVM_RC_FILE=`nvm_find_nvmrc`

  if [ "$NVM_RC_FILE"  == "" ]; then
    DEFAULT_VERSION="$(nvm_alias default 2>/dev/null || echo)"
    NVM_VERSION="$(nvm_version $DEFAULT_VERSION)"
  else
    NVM_VERSION=`cat "$NVM_RC_FILE"`
  fi

  [ "$(nvm_version_path $NVM_VERSION)/bin" == "$NVM_BIN" ] || nvm use "$NVM_VERSION"
}

alias ll='ls -lah'
cd() { builtin cd "$@"; nvm_auto_switch; ll; }

# -------------------------------------
#   Symlinks
#   -> List symlink files in a specified directory
# -------------------------------------
#
# $1 - the directory
#
# Usage: `symlinks ~`
#

function symlinks() {
  ls -al "$1" | grep .-\>
}